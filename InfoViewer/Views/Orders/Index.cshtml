@model OrdersViewModel

@{
	string actionForForm =  Url.Action("Index");
	string urlForReset = Url.Action("Index", new { page = Model.PageInfo.PageNumber, sortOrder = Model.CurrentOrder });
	//Для сохранения страницы и сортировки
	Dictionary<string, string> pageParams = new Dictionary<string, string>();
	pageParams.Add("page", Model.PageInfo.PageNumber.ToString());
	if (Model.CurrentOrder != null)
		pageParams.Add("sortOrder", Model.CurrentOrder);
}
<div class="container">
	@Html.CreateFilter(urlForReset, actionForForm ,"Filter by id or name:", Model.CurrentFilter, pageParams)
</div>

<div class="container">
	<table class="table">
		<thead>
			<tr>
				<th scope="col">
					<a asp-action="Index" asp-route-sortOrder="@Model.IdSortParam" asp-route-Page="@Model.PageInfo.PageNumber" asp-route-filter="@Model.CurrentFilter">Id</a>
				</th>
				<th scope="col">
					<a asp-action="Index" asp-route-sortOrder="@Model.NameSortParam" asp-route-Page="@Model.PageInfo.PageNumber" asp-route-filter="@Model.CurrentFilter">Customer</a>
				</th>
				<th scope="col">
					<a asp-action="Index" asp-route-sortOrder="@Model.DateSortParam" asp-route-Page="@Model.PageInfo.PageNumber" asp-route-filter="@Model.CurrentFilter">Date</a>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model.Orders) {
			<tr>
				<th scope="row"><a asp-action ="Order" asp-route-id=@item.Id>@item.Id</a> </th>
				<td>@item.Customer.FullName</td>
				<td>@item.OrderDate.ToLongDateString()</td>
			</tr>
			}
		</tbody>
	</table>
</div>

<div class="container">
	@(Html.CreatePagination(Model.PageInfo ,x=> Url.Action("Index", new{page = x, sortOrder=Model.CurrentOrder, filter = Model.CurrentFilter}), options.Value))
</div>


